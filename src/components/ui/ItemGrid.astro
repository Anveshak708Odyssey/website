---
import type { ItemGrid as Props } from '~/types';
import { twMerge } from 'tailwind-merge';
import Button from './Button.astro';
import { Icon } from 'astro-icon/components';

const { items = [], columns, defaultIcon = '', classes = {} } = Astro.props;

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary',
  action: actionClass = '',
} = classes;
---

{
  items && items.length > 0 && (
    <div
      class={twMerge(
        `grid mx-auto gap-8 md:gap-y-12 ${
          columns === 4
            ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2'
            : columns === 3
              ? 'lg:grid-cols-3 sm:grid-cols-2'
              : columns === 2
                ? 'sm:grid-cols-2 '
                : ''
        }`,
        containerClass
      )}
    >
      {items.map(({ title, description, icon, callToAction, href, target, classes: itemClasses = {} }) => {
        const ItemWrapper = href ? 'a' : 'div';
        const linkProps = href
          ? {
              href: href,
              target: target || (href.startsWith('http') ? '_blank' : '_self'),
              rel: href.startsWith('http') ? 'noopener noreferrer' : undefined,
            }
          : {};

        return (
          <div class={twMerge('relative flex flex-col', panelClass, itemClasses?.panel)}>
            <ItemWrapper
              {...linkProps}
              class={twMerge(
                'flex flex-col',
                href
                  ? 'hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors duration-200 cursor-pointer rounded-lg p-4 -m-4'
                  : ''
              )}
            >
              <div class="flex flex-row max-w-md">
                <div class="flex justify-center">
                  {(icon || defaultIcon) && (
                    <Icon
                      name={icon || defaultIcon}
                      class={twMerge('w-7 h-7 mr-2 rtl:mr-0 rtl:ml-2', defaultIconClass, itemClasses?.icon)}
                    />
                  )}
                </div>
                <div class="mt-0.5">
                  {title && <h3 class={twMerge('text-xl font-bold', titleClass, itemClasses?.title)}>{title}</h3>}
                  {description && (
                    <p
                      class={twMerge('text-muted mt-3', descriptionClass, itemClasses?.description)}
                      set:html={description}
                    />
                  )}
                  {callToAction && !href && (
                    <div class={twMerge('mt-3', actionClass, itemClasses?.action)}>
                      <Button variant="link" {...callToAction} />
                    </div>
                  )}
                </div>
              </div>
            </ItemWrapper>
          </div>
        );
      })}
    </div>
  )
}
